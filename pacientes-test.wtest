import pacientes.*

describe "Test de la parte 1" {
  //Pacientes
  const leonardo = new Paciente(edad=40, dolor=10,fortaleza=20)
  const milena = new Paciente(edad=3, dolor=30,fortaleza=50)

  //Aparatos
  const magneto = new Magneto()
  const bicicleta = new Bicicleta()
  const minitramp = new Minitramp()

  test "Leonardo Puede usar los tres aparatos" {
    assert.that(magneto.puedeSerUsado(leonardo))
    assert.that(bicicleta.puedeSerUsado(leonardo))
    assert.that(minitramp.puedeSerUsado(leonardo))
  }

  test "Milena solo puede usar el magneto" {
    assert.that(magneto.puedeSerUsado(milena))
    assert.notThat(bicicleta.puedeSerUsado(milena))
    assert.notThat(minitramp.puedeSerUsado(milena))
  }

  test "Después de usar el magneto una vez, el nivel de dolor de Leonardo baja a 9" {
    leonardo.usar(magneto)
    assert.equals(9, leonardo.dolor())
  }

   test "Después de usar el magneto una vez, el nivel de dolor de milena baja a 27" {
    milena.usar(magneto)
    assert.equals(27, milena.dolor())
  }

  test "Después de usar la bicicleta una vez, el nivel de dolor de Leonardo baja a 6 y la fortaleza sube a 23" {
    leonardo.usar(bicicleta)
    assert.equals(6, leonardo.dolor())
    assert.equals(23, leonardo.fortaleza())
  }

  test "Después de usar el minitramp una vez, la fortaleza sube a 24" {
    leonardo.usar(minitramp)
    assert.equals(24, leonardo.fortaleza())
  }
}

describe "Test de la parte 2" {
  //Pacientes
  const leonardo = new Paciente(edad=40, dolor=10,fortaleza=20)
  const milena = new Paciente(edad=3, dolor=30,fortaleza=50)

  //Aparatos
  const magneto = new Magneto()
  const bicicleta = new Bicicleta()
  const minitramp = new Minitramp()

  method initialize() {
    leonardo.agregarVariosARutina([bicicleta, minitramp, bicicleta, magneto])
    milena.agregarVariosARutina([magneto, bicicleta])
  }

  test "Leonardo puede hacer la rutina que tiene asignada" {
    assert.that(leonardo.puedeHacerLaRutina())
  }

  test "Milena no puede hacer la rutina que tiene asignada" {
    assert.notThat(milena.puedeHacerLaRutina())
  }

  test "Al hacer la rutina leonardo,  vsu nivel de dolor baja a 1.8, y su fortaleza sube a 30." {
    leonardo.realizarSesionCompleta()
    assert.equals(1.8, leonardo.dolor())
    assert.equals(30, leonardo.fortaleza())
  }
}


describe "Test de la parte 3" {
  //Pacientes
  const nicolas = new Resistente(edad=40, dolor=10,fortaleza=20)
  const victoria = new Caprichoso(edad=30, dolor=10,fortaleza=40)
  const julian = new Caprichoso(edad=20, dolor=54,fortaleza=50)
  const zoe = new RapidaRecuperacion(edad=50, dolor=14,fortaleza=40)

  //Aparatos
  const magneto = new Magneto()
  const bicicleta = new Bicicleta()
  const minitramp = new Minitramp()
  const bicicletaRoja = new Bicicleta(color="rojo")
  const magnetoVerde = new Magneto(color="verde")

  method initialize() {
    nicolas.agregarVariosARutina([bicicleta, minitramp, bicicleta, magneto])
    victoria.agregarVariosARutina([bicicleta, minitramp, bicicleta, magneto])
    julian.agregarVariosARutina([bicicletaRoja, magnetoVerde, bicicleta])
    zoe.agregarVariosARutina([bicicleta, minitramp, bicicleta, magneto])
    rapidosDeRecuperacion.cantidadConfigurable(2)
  }

  test"Nicolás puede hacer la rutina que tiene asignada. Después de hacerla una vez, su nivel de dolor baja a 1.8, y su fortaleza sube a 34."{
    assert.that(nicolas.puedeHacerLaRutina())
    nicolas.realizarSesionCompleta()
    assert.equals(1.8, nicolas.dolor())
    assert.equals(34, nicolas.fortaleza())
  }

  test "Victoria no puede hacer la rutina que tiene asignada." {
    assert.notThat(victoria.puedeHacerLaRutina())
  }

  test"Julian puede hacer la rutina que tiene asignada. Después de hacerla una vez, su nivel de dolor baja a 29.3, y su fortaleza sube a 62."{
    assert.that(julian.puedeHacerLaRutina())
    julian.realizarSesionCompleta()
    assert.equals(29.3, julian.dolor())
    assert.equals(62, julian.fortaleza())
  }

  test" Después de asignar a 2 el valor de decremento de dolor para pacientes de rápida recuperación, puede hacer la rutina que tiene asignada. Después de hacerla una vez, su nivel de dolor baja a 3.4, y su fortaleza sube a 51."{
    assert.that(zoe.puedeHacerLaRutina())
    zoe.realizarSesionCompleta()
    assert.equals(3.4, zoe.dolor())
    assert.equals(51, zoe.fortaleza())
  }
}

describe "Test de la parte 4 y 5" {

  //Pacientes
  const nicolas = new Resistente(edad=40, dolor=80,fortaleza=20)
  const victoria = new Caprichoso(edad=30, dolor=10,fortaleza=40)
  const julian = new Caprichoso(edad=20, dolor=54,fortaleza=50)
  const zoe = new RapidaRecuperacion(edad=50, dolor=14,fortaleza=40)
  const chloe = new RapidaRecuperacion(edad=2, dolor=14,fortaleza=40)
  const alicia = new Resistente(edad=7, dolor=22,fortaleza=20)

  //Aparatos
  const magneto = new Magneto(imantacion = 100)
  const bicicleta = new Bicicleta()
  const minitramp = new Minitramp()
  const bicicletaRoja = new Bicicleta(color="rojo")
  const magnetoVerde = new Magneto(color="verde", imantacion = 100)

  method initialize() {
    //Agregar a la Kinesiologia
    kinesiologia.agregarAparatos([magneto, bicicleta, minitramp, bicicletaRoja, magnetoVerde])
    kinesiologia.agregarPacientes([nicolas, victoria, julian, zoe, chloe, alicia])

    //Rutina de los pacientes
    nicolas.agregarVariosARutina([bicicleta, minitramp, bicicleta, magneto])
    victoria.agregarVariosARutina([bicicleta, minitramp, bicicleta, magneto])
    julian.agregarVariosARutina([bicicletaRoja, magnetoVerde, bicicleta])
    zoe.agregarVariosARutina([bicicleta, minitramp, bicicleta, magneto])
    chloe.agregarVariosARutina([bicicleta, minitramp, bicicleta, magneto])
    alicia.agregarVariosARutina([bicicleta, minitramp, bicicleta, magneto])

    //mejora de los rapidos de recuperacion
    rapidosDeRecuperacion.cantidadConfigurable(2)

    nicolas.usar(magneto)
    nicolas.usar(magnetoVerde)
    (0..10).forEach({n => nicolas.usar(bicicleta)})
  }

  test "Los colores de los aparatos de la Kinesiologia son rojo, verde y blanco" {
    assert.equals(#{"blanco", "rojo", "verde"}, kinesiologia.coloresDeAparatosSinRepetidos())
  }

  test "Los pacientes menores a 8 años son chloe y alicia" {
    assert.equals([chloe, alicia], kinesiologia.menoresDeOchoAños())
  }

  test "La cantidad de pacientes que no pueden realizar su rutina son 4, victoria, chloe, zoe y alicia" {
    assert.equals(4, kinesiologia.cantNoPuedenCumplirConSuSesion())
  }

  test "Esta complicado ya que el magneto, el magnetoverde y la bicicleta necesitan mantenimiento" {
    assert.that(kinesiologia.estaComplicado())
  }

  test "Luego de una visita al tecnico, esta en optimas condiciones" {
    kinesiologia.visitaAlTecnico()
    assert.that(kinesiologia.estaEnOptimasCondiciones())
  }
}